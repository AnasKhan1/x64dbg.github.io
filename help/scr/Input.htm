
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Input</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Courier New;
	font-size: 11pt;
}
</style>




<link href="template/winchm_template_style.css" rel="stylesheet" type="text/css">
<script type="text/javascript">
function d_onresize(){
if (window.navigator.userAgent.indexOf("MSIE")>=1){
document.getElementById('winchm_template_content').style.pixelWidth = document.body.offsetWidth - 3;
document.getElementById('winchm_template_content').style.pixelHeight = document.body.offsetHeight - document.getElementById('winchm_template_top').offsetHeight - 4;
}
document.getElementById('winchm_template_content').style.top = document.getElementById('winchm_template_top').offsetHeight + 'px';
}

function d_onbeforeprint(){
document.getElementById('winchm_template_content').style.width = 'auto';
document.getElementById('winchm_template_content').style.height = 'auto';
}

function d_onafterprint(){
d_onresize();
}

window.onload = d_onresize;
window.onresize = d_onresize;
window.onbeforeprint = d_onbeforeprint;
window.onafterprint = d_onafterprint;
</script>
</head>

<body><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(1);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../index.htm?page=Input.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 


<div id="winchm_template_top">
<table width="100%" height="50" bgcolor="#c4d0f4" style="WIDTH: 100%" cellSpacing=0 cellPadding=3 border=0>
<tr>
<td>
<div id="winchm_template_navigation">
<em><FONT face=Courier>New&nbsp;Help &gt; 
      <A href="Introduction.htm">Introduction</A> &gt; </FONT>  </em> </div>
<div id="winchm_template_title"><FONT 
      face=Courier>Input</FONT>
</div>
</td>
<td align="right" style="WIDTH: 90px">
<A href="Introduction.htm" title="Previous"><img id="winchm_template_prev" alt="Previous" src="template/btn_prev_n.gif" border="0"></a><A href="Variables.htm" title="Next"><img id="winchm_template_next" alt="Next" src="template/btn_next_n.gif" border="0"></a>
</td>
</tr>
</table>
</div>
<div id="winchm_template_content">
<p><FONT face=Courier>
<P class=rvps3><SPAN class=rvts10><STRONG>Input</STRONG><BR></SPAN><SPAN 
class=rvts9>This program accepts various options of input:</SPAN><SPAN 
class=rvts9><BR></SPAN></P>
<P class=rvps3><SPAN class=rvts11><U>commands</U></SPAN><SPAN class=rvts9>: 
Commands have the following format: "</SPAN><SPAN 
class=rvts10>command[space]arg1,[optional space]arg2,argN</SPAN><SPAN 
class=rvts9>".</SPAN><SPAN class=rvts9><BR></SPAN></P>
<P class=rvps3><SPAN class=rvts11><U>variables</U></SPAN><SPAN class=rvts9>: 
Variables optionally start with a $ and can only store one DWORD (QWORD on 
x64).</SPAN><SPAN class=rvts9><BR></SPAN></P>
<P class=rvps3><SPAN class=rvts11><U>debug registers</U></SPAN><SPAN 
class=rvts9>: All debug registers (all sizes) can be used as 
variables.</SPAN><SPAN class=rvts9><BR></SPAN></P>
<P class=rvps3><SPAN class=rvts11><U>memory locations</U></SPAN><SPAN 
class=rvts9>: You can read from a memory location by using one of the 
following expressions:<BR>[addr]&nbsp;&nbsp;&nbsp; - read a 
DWORD/QWORD, depending on the architecture.<BR>         
                 
            
               
            
     </SPAN><SPAN 
class=rvts9>@addr&nbsp;&nbsp;&nbsp;&nbsp; - same as 
above.<BR><EM>n</EM>:[addr]&nbsp;&nbsp;- read <EM>n</EM>         
                 
            
               
            
     bytes.</SPAN><SPAN 
class=rvts9><BR>         
       @<EM>n</EM>:addr&nbsp;&nbsp; - same as 
above.<BR><STRONG>REMARKS</STRONG>:<BR>- <EM>n</EM> is the amount of bytes to 
read, this can be anything smaller than 4 on x32 and smaller than 8 on x64 when 
specified, otherwise there will be an error.<BR>- addr is directly interpreted 
as a value, when you want to read [addr+1] you should use 
brackets:<BR>         
                 
            
               
            
 @(addr+1), @addr+1 will read: [addr]+1.</SPAN></P>
<P class=rvps3><SPAN 
class=rvts9>         
                 
            
               
            
     </SPAN><SPAN 
class=rvts9><U>flags</U>      : Debug flags 
(interpreted as integer) can be used as input. Flags are prefixed with a '!' following the flag name. 
Valid flags are: !cf, !pf, !af, !zf, !sf, !tf, !if, !df, !of, !rf, !vm, !ac, !vif, !vip and !id.</SPAN><SPAN class=rvts9></P></SPAN>
<P class=rvps3><SPAN class=rvts11><U>numbers</U></SPAN><SPAN class=rvts9>: 
All numbers are interpreted as 
hex by default. If you want to be sure, you can use the "x" prefix or 
the "0x" prefix. Decimal numbers can be used by prefixing the number with a "." 
(.123=7B).</SPAN></P>
<P class=rvps3><SPAN class=rvts9><U>basic calculations</U>:
           See "Calculations" for more 
information.</SPAN></P>
<P class=rvps3><SPAN class=rvts9><U>DLL exports</U>: Type 'GetProcAddress' and it will 
automatically be resolved to the actual address of the function. To explicitly 
define from which module to load the API, use: "kernel32.dll:GetProcAddress" or "kernel32:GetProcAddress". In a similar way 
you can resolve ordinals, try "ntdll:1". Another macro allows you to get the loaded 
base of a module. Try  
                
           "ntdll:0", "ntdll:base", "ntdll:imagebase" or 
"ntdll:header".</SPAN></P>
<P class=rvps3><SPAN class=rvts9><U>labels/symbols</U>      
  : user-defined labels  
                
           and symbols&nbsp;are a valid 
expressions.</SPAN></P>
<P class=rvps3><SPAN class=rvts9><STRONG>Input for arguments can always be done in any of 
the above forms, except if stated otherwise.</STRONG>  
                
  
                
               
</SPAN></P></FONT></p>
<hr>
  <font face="Courier" color="#808080" size="1"><A 
href="http://x64dbg.com" target=_blank>x64_dbg</A>,&nbsp;GPLv3</font>&nbsp;      </div>

</body></HTML>